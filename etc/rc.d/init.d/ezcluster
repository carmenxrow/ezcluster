#! /bin/sh
#
# Control the eZ Cluster Node
#
# chkconfig: 35 90 10
# description: eZCluster script
# config: /etc/ezcluster/ezcluster.xml
# pidfile: /var/run/ezcluster/ezcluster.pid

### BEGIN INIT INFO
# Provides: ezcluster
# Required-Start: $network $local_fs
# Required-Stop: $network $local_fs 
# Should-Start: $syslog
# Short-Description: start and stop ezcluster
# Description: A Management script for a eZ AWS Cluster
### END INIT INFO

# Source function library.
. /etc/init.d/functions

retval=0
pidfile=/var/run/ezcluster.pid
EZCLUSTER_HOME=/usr/share/ezcluster
exec="$EZCLUSTER_HOME/ezcluster"

config="/etc/ezcluster/ezcluster.xml"
lockfile="/var/lock/subsys/ezcluster"

start() {

	if [ ! -x $exec ]
	then
		echo $exec not found
		exit 5
	fi
        if [ -d /mnt/ephemeral ]; then
            # https://bugs.launchpad.net/ubuntu/+source/cloud-init/+bug/893786
            chmod 777 /mnt/ephemeral
        fi
        if [ ! -f $config ]
        then
                echo $config not found
				echo update ezcluster
                yum -y --disablerepo=* --enablerepo=xrow update xrow-repo > /var/log/ezcluster.log 2>&1 
                yum -y --enablerepo=xrow-opt update ezcluster > /var/log/ezcluster.log 2>&1
				echo running init cluster
                $exec init
                if [ ! -f $config ]
                then
                   echo $config not found, exit
                   exit 6
                fi
        fi
	cat $config | grep -q -i 'debug="yes"'
    retval=$?
    if [ $retval -eq 0 ]
    then
       sh /usr/share/ezcluster/lib/scripts/debug.sh
    fi
	echo -n "Starting eZ Cluster Node: "

	# PHP always gives output on STDOUT
	daemon $exec start > /var/log/ezcluster.log 2>&1
	retval=$?
	if [ $retval -eq 0 ]
	then
		touch $lockfile
		echo_success
		echo
	else
		echo_failure
	fi
    return $retval
}

stop() {
	echo -n "Stopping eZ Cluster Node: "
	daemon $exec stop > /var/log/ezcluster.log 2>&1
	retval=$?
	if [ $retval -eq 0 ]
                then
                        rm -f $lockfile
                        echo_success
                        echo
                else
                        echo_failure
                fi
	return $retval
}

restart() {
	stop
	start
}

reload() {
	restart
}

force_reload() {
	restart
}

rh_status() {
#	status $prog
        return 0
}

rh_status_q() {
	rh_status >/dev/null 2>&1
}

# See how we were called.
case "$1" in
	start)
		#rh_status_q && exit 0
		$1
		;;
	stop)
		#rh_status_q || exit 0
		$1
		;;
	restart)
		$1
		;;
	reload)
		#rh_status_q || exit 7
		$1
		;;
	force-reload)
		force_reload
		;;
	status)
		rh_status
		;;
	condrestart|try-restart)
		#rh_status_q || exit 0
		restart
		;;
	*)
	echo "Usage: $0 {start|stop|status|restart|condrestart|try-restart|reload|force-reload}"

	exit 2
esac

exit $?

